name: CI/CD Sistema Internos

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging

env:
  PHP_VERSION: '8.1'

jobs:
  test:
    name: 🧪 Tests y Validación
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
          tools: composer:v2

      - name: 📦 Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: 🔧 Install dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress --no-scripts
          else
            echo "No composer.json found, skipping composer install"
          fi

      - name: ✅ PHP Syntax Check
        run: |
          echo "🔍 Checking PHP syntax..."
          find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \; | grep -v "No syntax errors"
          echo "✅ PHP syntax check passed"

      - name: 🧹 Code Quality Check
        run: |
          echo "🔍 Checking for common issues..."
          # Verificar que no haya credenciales hardcodeadas
          if grep -r "password\|secret\|key" --include="*.php" . | grep -v "placeholder\|example\|ENV\|config.php"; then
            echo "❌ Possible hardcoded credentials found"
            exit 1
          fi
          echo "✅ Code quality check passed"

      - name: 🔒 Security Check
        run: |
          echo "🔍 Checking for security issues..."
          # Verificar que .env no esté en el repositorio
          if [ -f .env ]; then
            echo "❌ .env file found in repository"
            exit 1
          fi
          echo "✅ Security check passed"

  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            echo "🚀 Starting staging deployment..."
            cd /var/www/html/staging-internos || exit 1
            sudo cp -r . ../backup-staging-$(date +%Y%m%d-%H%M%S)
            git fetch origin
            git reset --hard origin/staging
            if [ -f composer.json ]; then
              composer install --no-dev --optimize-autoloader
            fi
            sudo chown -R www-data:www-data .
            sudo chmod -R 755 .
            echo "✅ Staging deployment completed successfully"

  deploy-production:
    name: 🚀 Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            echo "🚀 Starting production deployment..."
            cd /var/www/html/internos || exit 1
            sudo cp -r . ../backup-prod-$(date +%Y%m%d-%H%M%S)
            git fetch origin
            git reset --hard origin/main
            if [ -f composer.json ]; then
              composer install --no-dev --optimize-autoloader
            fi
            [ -d cache ] && rm -rf cache/*
            [ -d logs/*.log ] && > logs/*.log
            sudo chown -R www-data:www-data .
            sudo chmod -R 755 .
            echo "✅ Production deployment completed successfully"

  notify:
    name: 📱 Notificaciones
    needs: [test, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Deployment Status
        run: |
          echo "📊 Deployment Summary:"
          echo "Tests: ${{ needs.test.result }}"
          echo "Staging: ${{ needs.deploy-staging.result }}"
          echo "Production: ${{ needs.deploy-production.result }}"
          if [ "${{ needs.test.result }}" = "failure" ]; then
            echo "❌ Tests failed - deployment blocked"
          elif [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "✅ Production deployment successful"
          elif [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "✅ Staging deployment successful"
