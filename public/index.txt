<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Directorio Telefónico</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="css/styles.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
</head>
<body>
    <div class="container-fluid">
        <div class="header-with-search">
            <div class="header-left">
                <img src="img/logo_espacio_memoria_2022_2.png" alt="Logo" class="header-logo" />
                <h1>Directorio Telefónico</h1>
            </div>

            <div class="header-right">
                <div class="search-container">
                    <input
                        type="text"
                        id="searchInput"
                        class="form-control"
                        placeholder="Buscar extensión o área..."
                    />
                </div>
                <button id="downloadPdfBtn" class="btn btn-info">
                    <i class="fas fa-file-pdf"></i> Descargar PDF
                </button>
            </div>
        </div>

        <div class="areas-container" id="areas-container"></div>

        <button id="saveLayoutBtn" class="btn btn-primary save-layout-btn">
            <i class="fas fa-save"></i> Guardar Orden
        </button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="js/estados.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('areas-container');
            const saveBtn = document.getElementById('saveLayoutBtn');
            const searchInput = document.getElementById('searchInput');
            const downloadPdfBtn = document.getElementById('downloadPdfBtn');
            let areasData = [];
            let displayedAreas = [];
            let draggedItem = null;

            // Cargar datos
            fetch('internos.php')
                .then((response) => response.json())
                .then((data) => {
                    areasData = data;
                    const savedOrder = localStorage.getItem('areasOrder');

                    if (savedOrder) {
                        const orderArray = JSON.parse(savedOrder);
                        areasData.sort((a, b) => {
                            return orderArray.indexOf(a.area) - orderArray.indexOf(b.area);
                        });
                    }

                    displayedAreas = [...areasData];
                    renderAreas();
                    setupDragAndDrop();
                });

            // Renderizar áreas
            function renderAreas() {
                container.innerHTML = '';

                displayedAreas.forEach((area) => {
                    const areaCard = document.createElement('div');
                    areaCard.className = 'area-card';
                    areaCard.draggable = true;
                    areaCard.dataset.area = area.area;

                    const header = document.createElement('div');
                    header.className = 'area-header';
                    header.innerHTML = `
                        ${area.area}
                        <span class="float-end"><i class="fas fa-arrows-alt"></i></span>
                    `;

                    const gridContainer = document.createElement('div');
                    gridContainer.className = 'extension-grid-container';

                    const grid = document.createElement('div');
                    grid.className = 'extension-grid';

                    area.internos.forEach((interno) => {
                        const extCard = document.createElement('div');
                        extCard.className = 'extension-card';
                        extCard.title = `${interno.extension} - ${interno.nombre}`;

                        const estadoNormalized = interno.estado ? interno.estado.trim() : '';
                        const tieneLedVerde = estadoNormalized.includes('🟢');
                        const ledClass = tieneLedVerde ? 'estado-verde' : 'estado-rojo';

                        extCard.innerHTML = `
                            <div class="extension-number-container">
                                <span class="extension-number">${interno.extension}</span>
                                <span class="estado-led ${ledClass}"></span>
                            </div>
                            <div class="extension-name">${interno.nombre}</div>
                        `;

                        grid.appendChild(extCard);
                    });

                    gridContainer.appendChild(grid);
                    areaCard.appendChild(header);
                    areaCard.appendChild(gridContainer);
                    container.appendChild(areaCard);
                });
            }

            // Configurar drag and drop
            function setupDragAndDrop() {
                const areaCards = document.querySelectorAll('.area-card');
                
                areaCards.forEach(card => {
                    card.addEventListener('dragstart', handleDragStart);
                    card.addEventListener('dragend', handleDragEnd);
                });

                container.addEventListener('dragover', handleDragOver);
                container.addEventListener('dragenter', handleDragEnter);
                container.addEventListener('dragleave', handleDragLeave);
                container.addEventListener('drop', handleDrop);
            }

            function handleDragStart(e) {
                draggedItem = this;
                setTimeout(() => {
                    this.classList.add('dragging');
                }, 0);
                
                // Establece el efecto de arrastre
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', this.innerHTML);
            }

            function handleDragEnd() {
                this.classList.remove('dragging');
                saveBtn.style.display = 'block';
            }

            function handleDragOver(e) {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                
                const afterElement = getDragAfterElement(container, e.clientY);
                if (afterElement == null) {
                    container.appendChild(draggedItem);
                } else {
                    container.insertBefore(draggedItem, afterElement);
                }
            }

            function handleDragEnter(e) {
                e.preventDefault();
                if (this !== draggedItem) {
                    this.classList.add('drag-over');
                }
            }

            function handleDragLeave() {
                this.classList.remove('drag-over');
            }

            function handleDrop(e) {
                e.preventDefault();
                this.classList.remove('drag-over');
            }

            function getDragAfterElement(container, y) {
                const draggableElements = [...container.querySelectorAll('.area-card:not(.dragging)')];

                return draggableElements.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;

                    if (offset < 0 && offset > closest.offset) {
                        return { offset: offset, element: child };
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY }).element;
            }

            // Guardar el orden
            saveBtn.addEventListener('click', function() {
                const newOrder = [...container.querySelectorAll('.area-card')].map(card => card.dataset.area);
                localStorage.setItem('areasOrder', JSON.stringify(newOrder));
                saveBtn.style.display = 'none';
                
                // Mostrar feedback
                const feedback = document.createElement('div');
                feedback.className = 'alert alert-success position-fixed top-0 start-50 translate-middle-x mt-2';
                feedback.textContent = 'Orden guardado correctamente';
                document.body.appendChild(feedback);
                
                setTimeout(() => {
                    feedback.remove();
                }, 2000);
            });

            // Lógica de búsqueda (se mantiene igual)
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase().trim();
                
                if (searchTerm === '') {
                    displayedAreas = [...areasData];
                } else {
                    displayedAreas = areasData.map(area => {
                        const filteredInternos = area.internos.filter(interno => 
                            interno.extension.toLowerCase().includes(searchTerm) || 
                            interno.nombre.toLowerCase().includes(searchTerm)
                        );
                        
                        if (area.area.toLowerCase().includes(searchTerm) || filteredInternos.length > 0) {
                            return {
                                ...area,
                                internos: filteredInternos
                            };
                        }
                        return null;
                    }).filter(Boolean);
                }
                
                renderAreas();
                setupDragAndDrop();
            });

            // Lógica para descargar PDF (se mantiene igual)
            downloadPdfBtn.addEventListener('click', function() {
                const currentOrder = [...container.querySelectorAll('.area-card')].map(card => card.dataset.area);
                
                let dataForPdf = [...areasData];
                dataForPdf.sort((a, b) => {
                    return currentOrder.indexOf(a.area) - currentOrder.indexOf(b.area);
                });
                
                fetch('generar_pdf_test.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(dataForPdf),
                })
                .then(response => {
                    if (response.ok) {
                        return response.blob();
                    }
                    throw new Error('Error al generar el PDF');
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = 'directorio.pdf';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                })
                .catch(error => {
                    alert(error.message);
                });
            });
        });
    </script>
</body>
</html>